import constants 
from constants import TEAMS
from constants import PLAYERS
import copy

teams_copy = copy.deepcopy(TEAMS)
players_copy = copy.deepcopy(PLAYERS)


#Define function 'clean data()' that will turn height into an integer and experience output into a boolean value
def clean_data(players_copy):
    for dictionary in players_copy:
        for key, value in dictionary.items():
            if value == "YES":
                dictionary["experience"] = True

            elif value == "NO":
                dictionary["experience"] = False

            elif key == "height":
                dictionary['height'] = int(value[0:2])

           

#Create empty lists to append values from the balance_teams() function that will be used in the program later on
panthers = []
warriors = []
bandits = []

def balance_teams():
    
    panthers_team = slice(6)
    warriors_team = slice(6,12)
    bandits_team = slice(12,19)

  
    for item in players_copy:
        if item in players_copy[panthers_team]:
            for key, value in item.items():
                if key == "name":
                    panthers.append(value)

        elif item in players_copy[warriors_team]:
            for key, value in item.items():
                if key == "name":
                    warriors.append(value)
        
        elif item in players_copy[bandits_team]:
            for key, value in item.items():
                if key == "name":
                    bandits.append(value)

def team_stats(team_choice):
    if team_choice == 1:
        team_name = "Panthers"
        team_members = panthers
    elif team_choice == 2:
        team_name = "Bandits"
        team_members = bandits
    elif team_choice == 3:
        team_name = "Warriors"
        team_members = warriors
    else:
        print("Oops. This is not a valid option. Try again.", "\n")
        return

    print("\nTeam: {} Stats".format(team_name))
    print("--------------------")
    print("Total Players:", int(len(players_copy)/len(teams_copy)))
    print("\nPlayers on Team:")
    print(', '.join(team_members))
    

#Add code inside dunder main to prevent automatic running of it
if __name__ == "__main__":
    clean_data(players_copy)
    balance_teams()

    while True:
        print("*** MENU ***", "\n")
        print("Here are your choices:" , "\n", "1) Display Team Stats", "\n", "2) Quit" , "\n") 
        #Request input from one of the options, 1 or 2. If option is not an integer, it will raise a ValueError with the response "This is not a valid optiom. Try Again."
        #If input is an int but not 1 or 2, user will see the "Uh-oh, this is not a valid option. Try again." If input is correct, user will either have 3 following choices (option 1) or will quit the program(2)"
        try: 
            option_query = int(input("Enter an option: "))
        #Offer user three options.
            if option_query == 1:
                print("1) Panthers", "\n", "2) Bandits" , "\n", "3) Warriors" , "\n")
                team_choice = int(input("Choose your team: "))
        #Print out the stats according to the options above
                team_stats(team_choice)
        #After user prints out stats, give him/her the option to continue or to quit 
        # Control possible errors generated by unexpected answer               
                try:
                    what_next = int(input("\nEnter 0 to Continue or 1 to Quit: "))
                    if what_next == 0:
                        continue
                    elif what_next == 1:
                        print("Thanks! Hope to see you soon!")
                        break
                    else:
                        print("Oh no! This is not a valid choice. Try again.")
                        continue
                except ValueError:
                    print("This is not a valid choice. Try again.")
                    continue
                
            elif option_query == 2:
                print("Alrighty then, thanks!")
                break
            elif option_query != 1 or 2:
                print("Uh-oh, this is not a valid option. Try again.\n")
                continue
                
        except ValueError:
            print("This is not a valid option. Try again.\n")
            continue
            
        
            

            
                        








